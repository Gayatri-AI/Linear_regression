# -*- coding: utf-8 -*-
"""Linear regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SxfRYFr7Vnq8bsUZ6xtbSAgh57orrXSd
"""

import numpy as np
import pandas as pd
import sklearn

from sklearn.datasets import load_boston
df = load_boston()

df.keys()                 #Returns all of the keys of dataset dictionary

print(df.DESCR)                   #3 Infio about the dataset

"""To convert dictionary into tabular form """

boston = pd. DataFrame(df.data, columns = df.feature_names)
boston.head()

"""Adding a new column of target values to the dataframes """

boston['MEDV'] =  df.target
boston.head()

"""To check null values

"""

boston.isnull()

boston.isnull().sum()

from sklearn.model_selection import train_test_split
X = boston.drop('MEDV' , axis=1)
Y = boston['MEDV']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.15, random_state=5)

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

## fitting model on the training datset
 
lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)

y_train_predict = lin_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(Y_train,y_train_predict)))

print("The model performance for training set")
print("RMSE is {}".format(rmse))
print("\n")

# on testing set
y_test_predict = lin_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(Y_test,y_test_predict)))

print("The model performance for testing set")
print("RMSE is {}".format(rmse))